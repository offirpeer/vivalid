{
  "name": "Vivalid",
  "tagline": "client side validations with async (client-server) support.",
  "body": "# ViValid [![Build Status](https://travis-ci.org/pazams/vivalid.svg)](https://travis-ci.org/pazams/vivalid)\r\n\r\n## Overview\r\nThis library was created to address client side validations that needs also an AJAX server response to verify an input constraint.  \r\nConsider a case of a registration form where a user needs to fill out his personal details while also choosing a username.  \r\nFor data integrity- all input constraints are validated on the server side upon data submission.  \r\nFor user experience- it is also worthy to validate all input constraints on the client side as the user interacts with your application.  \r\nSome constraints, such as \"existing user\" or \"valid location\", need to be validated at the background, and this is where this library plays well. It is also especially useful for SPAs.\r\n\r\n## Main features\r\n### Consolidates Sync and Async validations\r\nSync rules return with `stateEnum.invalid` or `stateEnum.valid`  \r\nAsyc rules return with `stateEnum.pending`, and also call a callback with `stateEnum.invalid` or `stateEnum.valid` when ready.\r\n### Full UI control \r\nEither edit the UI through a CSS rule for `.vivalid-error` , or gain complete control by passing a [callback](http://pazams.github.io/vivalid/documentation/-_internal.html#..onInputValidationResult) that will be called with a DOM element, validation message, and validation state.\r\n### Data attributes interface\r\nUse this library with full javascript interface, or the data attributes html interface (with js to only define callbacks).\r\n### Separation of validator rules\r\nNo validator rules are included. Write your own, or also choose to include common ones from https://github.com/pazams/vivalid-rules-core\r\n### Support for radio buttons and checkboxes\r\nsee [here](http://pazams.github.io/vivalid/documentation/vivalid.Input.html)\r\n\r\n\r\n## Installation\r\n\r\n### Manual:\r\n* save and include: https://raw.githubusercontent.com/pazams/vivalid/master/dist/vivalid-bundle.min.js\r\n* (optional) https://raw.githubusercontent.com/pazams/vivalid-rules-core/master/dist/vivalid-rules-core-bundle.min.js\r\n\r\n### npm:\r\n* `npm install vivalid`\r\n* (optional) `npm install vivalid-rules-core`\r\n\r\n### bower:\r\n* `bower install vivalid`\r\n* (optional) `bower install vivalid-rules-core`\r\n\r\n## JS interface\r\nSee js [documentation](http://pazams.github.io/vivalid/documentation/vivalid.html)\r\n\r\n## Data attributes html interface\r\nSee js [documentation](http://pazams.github.io/vivalid/documentation/vivalid.html), plus a short example ([live here](http://pazams.github.io/vivalid/demos/1/)):\r\n\r\n**index.html**\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n\r\n<head>\r\n  <script src=\"https://rawgit.com/pazams/vivalid/master/dist/vivalid-bundle.js\"></script>\r\n  <script src=\"https://rawgit.com/pazams/vivalid-rules-core/master/dist/vivalid-rules-core-bundle.min.js\"></script>\r\n  <script src=\"script.js\"></script>\r\n</head>\r\n\r\n<body>\r\n<!-- inline css styles to make the exmaple work as a standalone without a css file -->\r\n  <h1>Html data attributes interface</h1>\r\n\r\n  <form id=\"MainForm\" data-vivalid-group data-vivalid-on-validation='[\"onValidationSuccess\", \"onValidationFailure\"]' data-vivalid-pending-ui='[\"pendingUiStart\", \"pendingUiStop\"]'>\r\n\r\n    <div>\r\n      <input type=\"text\" placeholder=\"First Name\" data-vivalid-tuples='[[\"required\",{}],[\"betweenlength\",{\"min\": 4, \"max\": 10}]]' />\r\n    </div>\r\n\r\n      <div style=\"position: relative;\">\r\n      \r\n      <input type=\"text\" placeholder=\"User Name (type 'bob' and press send)\" \r\n      data-vivalid-tuples='[[\"required\",{}],[\"exisitingUserBob\",{}]]'\r\n      data-vivalid-result='onInputValidationResult'\r\n      />\r\n\r\n      <div class=\"js-message\" style=\"background-color: blue; color: white; display: none; position: absolute; z-index: 1; padding: 6px; left: 122px; top: 0;\">\r\n      </div>\r\n      \r\n    </div>\r\n\r\n    <div>\r\n      <input id=\"SendButton\" type=\"button\" value=\"send\" data-vivalid-submit />\r\n    </div>\r\n    \r\n    <div id=\"MessageLogs\">\r\n      \r\n    </div>\r\n\r\n  </form>\r\n\r\n</body>\r\n\r\n</html>\r\n```\r\n\r\n**script.js**\r\n```javascript\r\nvar addValidatorBuilder = vivalid.validatorRepo.addBuilder;\r\n    var addCallback = vivalid.htmlInterface.addCallback;\r\n    var initAll = vivalid.htmlInterface.initAll;\r\n    \r\n    function messageLog(message){\r\n      var log = document.getElementById('MessageLogs');\r\n      log.innerHTML = log.innerHTML +'<br/>' + message;\r\n    }\r\n\r\n    addValidatorBuilder('exisitingUserBob', function(ValidationState, stateEnum, options) {\r\n\r\n      return function(value, callback) {\r\n\r\n        var msg = 'user bob exists';\r\n\r\n        setTimeout(dummyServiceCall, 3000);\r\n\r\n        return new ValidationState('', stateEnum.pending);\r\n\r\n        function dummyServiceCall() {\r\n\r\n          if (value.indexOf('bob') !== -1) {\r\n            callback(new ValidationState(msg, stateEnum.invalid));\r\n          } else {\r\n            callback(new ValidationState('', stateEnum.valid));\r\n          }\r\n        }\r\n      };\r\n    });\r\n\r\n    addCallback('onValidationSuccess', function() {\r\n      messageLog('HOORAY!!!! input group is valid and form will submit');\r\n    });\r\n\r\n    addCallback('onValidationFailure', function(invalid, pending, valid) {\r\n      messageLog('input group is invalid!: ' + invalid + ' invalid, ' + pending + ' pending, and ' + valid + ' valid ');\r\n    });\r\n\r\n    addCallback('pendingUiStart', function(inputElems, submitElems) {\r\n      messageLog('pendingUiStart');\r\n      inputElems.forEach(function(input) {\r\n        input.disabled = true;\r\n      });\r\n\r\n      submitElems.forEach(function(submit) {\r\n        submit.disabled = true;\r\n      });\r\n\r\n      this.style.backgroundColor = 'green';\r\n    });\r\n\r\n    addCallback('pendingUiStop', function(inputElems, submitElems) {\r\n            messageLog('pendingUiStop');\r\n      inputElems.forEach(function(input) {\r\n        input.disabled = false;\r\n      });\r\n\r\n      submitElems.forEach(function(submit) {\r\n        submit.disabled = false;\r\n      });\r\n\r\n      this.style.backgroundColor = 'blue';\r\n    });\r\n\r\n    // show casing a callback for custom UI\r\n    addCallback('onInputValidationResult', function(el, validationsResult, validatorName, stateEnum) {\r\n\r\n      var msgEl = el.parentNode.querySelector('.js-message');\r\n      var displayEl = msgEl;\r\n\r\n      if (validationsResult.stateEnum === stateEnum.invalid) {\r\n        displayEl.style.display = 'block';\r\n        msgEl.innerHTML = validationsResult.message;\r\n      } else {\r\n        displayEl.style.display = 'none';\r\n        msgEl.innerHTML = '';\r\n      }\r\n\r\n    });\r\n\r\n\r\n    initAll();\r\n```\r\n\r\n## Contributers\r\nread [this](https://github.com/pazams/vivalid/issues/1) before attempting to `gulp build`\r\n\r\n## More demos\r\nComing soon\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}